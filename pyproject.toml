[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "terrible-tree"
version = "0.2.1"
description = "A dump and inefficient reimplmentation of the tree utility application, born out of pure boredome"
authors = [
    {name = "Philipp Krueger", email = "pille.krueger@web.de"},
]
dependencies = [
    "click<9.0.0,>=8.1.7",
    "natsort<9.0.0,>=8.4.0",
]
requires-python = ">=3.10,<4.0"
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]


[project.scripts]
terrible-tree = "terrible_tree.__main__:print_tree"
terrible-ls = "terrible_tree.__main__:print_list"

[project.optional-dependencies]
ci = [
    "commitizen>=3.13.0",
]
[tool.pdm.dev-dependencies]
dev = [
    "ruff<1.0.0,>=0.1.6",
    "pre-commit<4.0.0,>=3.5.0",
    "mypy>=1.8.0",
    "git-changelog>=2.5.2",
]

[tool.pdm.build]
includes = ["src/terrible_tree"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",   # missing annotation for self argument
    "D104",     # missing docstring in public package
    "D203",     # no blank line before class docstring
    "D212",     # multi line summary on the first line of a docstring
    "COM812",   # missing trailing comma
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402",     # unsused imports
]

"__version__.py" = [
    "D100",     # missing docstring in public module
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["terrible_tree"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.pdm.scripts]
post_install.help = "Install pre-commit hooks"
post_install.cmd = "pre-commit install --install-hooks"

format.help = "Run code formatters"
format.composite = [ 
    "ruff format src",
    "ruff src --select I --fix"
]

lint.help = "Run Code linters"
lint.composite = [
    "ruff src",
    "ruff format src --check",
    "mypy src",
]

[tool.pdm.scripts.bump]
help = "Bump version"
composite = [
    "git-changelog --bump=auto",
    "git add CHANGELOG.md",
    "cz bump",
]

[tool.git-changelog]
convention = "conventional"
provider = "github"
output = "CHANGELOG.md"

[tool.commitizen]
tag_format="v$version"
version_provider="pep621"
update_changelog_on_bump=false
