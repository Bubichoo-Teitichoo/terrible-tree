[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "terrible-tree"
version = "0.1.0"
description = "A dump and inefficient reimplmentation of the tree command, born out of pure boredome"
authors = ["Philipp Krueger"]
readme = "README.md"
license = "MIT"
packages = [{include = "terrible_tree", from = "src"}]

classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.scripts]
terrible-tree = "terrible_tree.__main__:main"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
python-semantic-release = "^8.1.1"
pre-commit = "^3.5.0"

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",   # missing annotation for self argument
    "D104",     # missing docstring in public package
    "D203",     # no blank line before class docstring
    "D212",     # multi line summary on the first line of a docstring
    "COM812"    # missing trailing comma
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "E402",     # unsused imports
]

"__version__.py" = [
    "D100",     # missing docstring in public module
]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.isort]
known-first-party = ["terrible_tree"]

[tool.poe.tasks]
install.help = "Setup a development environment and install pre-commit hooks"
install.sequence = [
    { cmd = "poetry install" },
    { cmd = "pre-commit install --install-hooks" }
]

format.help = "Run Code Formatters"
format.sequence = [
    { cmd = "ruff format src" },
    { cmd = "ruff src --select I --fix" }
]

lint.help = "Run Code linters"
lint.sequence = [
    { cmd = "ruff src" },
    { cmd = "ruff format src --check"}
]

[tool.semantic_release]
branch = "main"
verison_source = "tag"
tag_format = "v{version}"
commit_message = "chore: release v{version}"
build_command = "poetry build"
version_variables = [
    "src/terrible_tree/__main__.py:__version__"
]

version_toml = [
    "pyproject.toml:tool.poetry.version",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]
